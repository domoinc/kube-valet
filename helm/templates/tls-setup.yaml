{{ if .Values.tls.auto }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-valet-tls-bootstrap
  namespace: kube-valet
data:
  mutatingwebhookconfiguration.yaml: |
{{ include "kube-valet.webhook-config" . | indent 4 }}
  tls-gen.sh: |
    #!/bin/sh

    # Go to the certs dir
    cd /opt/certs

    # Init a ca with cfssl
    cat <<EOF | cfssl genkey -initca - | cfssljson -bare ca
    {
        "CN": "kube-valet-ca",
        "key": {
            "algo": "ecdsa",
            "size": 256
        }
    }
    EOF

    # Create a self-signed key and certificate
    cat <<EOF | cfssl gencert -ca ca.pem -ca-key ca-key.pem - | cfssljson -bare server
    {
        "CN": "kube-valet.kube-valet.svc",
        "hosts": [
            "kube-valet.kube-valet.svc",
            "kube-valet.kube-valet.svc.cluster.local"
        ],
        "key": {
            "algo": "ecdsa",
            "size": 256
        }
    }
    EOF

    # Allow later containers to read the keys
    chmod 444 *

  bootstrap.sh: |
    #!/bin/sh

    # Go to the certs dir
    cd /opt/certs

    # Put the ca certs in a secret.
    kubectl --namespace=kube-valet create secret generic tls-ca --from-file=ca.pem --from-file=ca-key.pem --from-file=ca.csr

    # Put the server certs in a secret
    kubectl --namespace=kube-valet create secret generic kube-valet --from-file=server.pem --from-file=server-key.pem --from-file=server.csr

    # Enable the webhook, embedding the the ca cert
    sed "s/__AUTO_TLS_CA_BUNDLE__/$(base64 -w0 ca.pem)/" /opt/valet/mutatingwebhookconfiguration.yaml | kubectl create -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tls-bootstrap
  namespace: kube-valet
---
# Create a role with access to the configmap
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tls-bootstrap
  namespace: kube-valet
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - "*"
---
# Bind the controller to a namespace role for configmap access
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tls-bootstrap
  namespace: kube-valet
subjects:
 - kind: ServiceAccount
   name: tls-bootstrap
   namespace: kube-valet
roleRef:
  kind: Role
  name: tls-bootstrap
  apiGroup: rbac.authorization.k8s.io
---
# Create a role with access to edit mutatingwebhookconfigurations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-valet-tls-bootstrap
rules:
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - "*"
---
# Bind the tls bootstrap role to the clusterrole
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-valet-tls-bootstrap
subjects:
 - kind: ServiceAccount
   name: tls-bootstrap
   namespace: kube-valet
roleRef:
  kind: ClusterRole
  name: kube-valet-tls-bootstrap
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tls-bootstrap
  namespace: kube-valet
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: tls-bootstrap
      initContainers:
      - name: tls-gen
        image: cfssl/cfssl:1.3.2
        command:
        - /bin/sh
        - /opt/valet/tls-gen.sh
        volumeMounts:
          - name: bootstrap
            mountPath: /opt/valet
          - name: certs
            mountPath: /opt/certs
      containers:
      - name: bootstrap
        image: bitnami/kubectl:1.14
        command:
        - /bin/sh
        - /opt/valet/bootstrap.sh
        volumeMounts:
          - name: bootstrap
            mountPath: /opt/valet
          - name: certs
            mountPath: /opt/certs
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
      volumes:
        - name: bootstrap
          configMap:
            name: kube-valet-tls-bootstrap
        - name: certs
          emptyDir: {}
      restartPolicy: Never
  backoffLimit: 4
{{ end }}
